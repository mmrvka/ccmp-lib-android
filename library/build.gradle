apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'maven'

group = 'net.ut11.ccmp'
archivesBaseName = 'ccmp-lib'
version = '1.2.1-SNAPSHOT'

buildscript {
	repositories {
		google()
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:3.2.1'
	}
}

repositories {
	google()
	jcenter()
}

android {
	compileSdkVersion 26

	defaultConfig {
		minSdkVersion 14
		targetSdkVersion 26
		versionName = version
	}

	useLibrary 'org.apache.http.legacy'

    lintOptions {
        abortOnError false
        absolutePaths false
        lintConfig file("lint.xml")

    }
}

dependencies {
    implementation "com.google.firebase:firebase-messaging:17.3.0"
	implementation 'com.android.support:support-v4:26.1+'
	implementation files('libs/ccmp-client.jar')
    implementation files('libs/disklrucache-2.0.2.jar')
	implementation 'com.google.android.gms:play-services-auth:16.0.1'

}

if (!hasProperty('uploadRepositoryUri')) project.ext.uploadRepositoryUri = ''
if (!hasProperty('uploadSnapshotRepositoryUri')) project.ext.uploadSnapshotRepositoryUri = ''
if (!hasProperty('uploadUser')) project.ext.uploadUser = ''
if (!hasProperty('uploadPassword')) project.ext.uploadPassword = ''

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: uri(uploadRepositoryUri)) {
				authentication(userName: uploadUser, password: uploadPassword)
			}
			snapshotRepository(url: uri(uploadSnapshotRepositoryUri)) {
				authentication(userName: uploadUser, password: uploadPassword)
			}
		}
	}
}

task checkstyle(type: Checkstyle) {
    configFile file('../checkstyle.xml')
    ignoreFailures true
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files( )
}

task findbugs(type: FindBugs) {
    excludeFilter file('../findbugs-filter.xml')
    ignoreFailures true
    classes = fileTree('build/intermediates/javac')
    source = fileTree('src/main/java/')
    classpath = files( )
    effort = 'max'
}

task pmd(type: Pmd) {
    ruleSetFiles = files('../pmd-ruleset.xml')
    ignoreFailures = true
    ruleSets = ["java-basic", "java-braces", "java-strings"]
    source = fileTree('src/main/java/')
}
